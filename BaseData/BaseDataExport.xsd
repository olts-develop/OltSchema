<?xml version="1.0" encoding="utf-8" ?>
<!--Created with Liquid XML 2015 Designer Edition 13.2.1.5996 (http://www.liquid-technologies.com)-->
<xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:include schemaLocation=".\BaseData.xsd" />
    <xs:complexType name="PeriodPricesChildren">
        <xs:sequence>
            <xs:element name="PeriodPrice" type="PeriodPriceAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="PeriodPriceAttributes">
        <xs:attributeGroup ref="SellGeneralAttributeGroup" />
        <xs:attributeGroup ref="ChildIdxNrAttributeGroup" />
        <xs:attribute name="NrNights" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Effective number of nights for which this price is valid</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="DateRelevantAttributeGroup" />
        <xs:attribute name="AlwaysApply" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="WeekdaysValidAttributeGroup" />
    </xs:complexType>
    <xs:complexType name="AddPeriodPricesChildren">
        <xs:sequence>
            <xs:element name="AddPeriodPrice" type="AddPeriodPriceAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="AddPeriodPriceAttributes">
        <xs:attributeGroup ref="SellGeneralAttributeGroup" />
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="ChildIdxNrAttributeGroup" />
        <xs:attribute name="NrNights">
            <xs:annotation>
                <xs:documentation>This is an optional attribute. By default the value is 1. If the amount is greater than 1, then this is a price for x additional nights. If one has a 5 night price, and stays 7 nights, then one can define an AddPeriodPrice with NrNights=2, then this is the price for specifically two additional nights.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:minInclusive value="1" />
                    <xs:maxInclusive value="999" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="PricePerNight">
            <xs:annotation>
                <xs:documentation>By default the price is for the NrNights specified in the node. If PerNightPrice is passed as true, then a NrNights=3 with Price=33 means one pays 33 for the first of the 3 nights, 33 for the second and 33 for the 3rd night: total 99. If the attribute were not passed, or passed with a value false, then the customer would pay a total of 33 for all 3 nights.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="DateRelevantAttributeGroup" />
        <xs:attribute name="AlwaysApply" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="WeekdaysValidAttributeGroup" />
    </xs:complexType>
    <xs:complexType name="PerDayPricesChildren">
        <xs:sequence>
            <xs:element name="PerDayPrice" type="PerDayPriceAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="PerDayPriceAttributes">
        <xs:attributeGroup ref="SellGeneralAttributeGroup" />
        <xs:attributeGroup ref="DayAttributeGroup" />
        <xs:attributeGroup ref="ChildIdxNrAttributeGroup" />
        <xs:attributeGroup ref="AgeFromToGroup" />
    </xs:complexType>
    <xs:complexType name="AddPerDayPricesChildren">
        <xs:sequence>
            <xs:element name="AddPerDayPrice" type="AddPerDayPriceAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="AddPerDayPriceAttributes">
        <xs:attributeGroup ref="SellGeneralAttributeGroup" />
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="ChildIdxNrAttributeGroup" />
        <xs:attributeGroup ref="WeekdaysValidAttributeGroup" />
        <xs:attributeGroup ref="AgeFromToGroup" />
    </xs:complexType>
    <xs:complexType name="OneTimesChildren">
        <xs:sequence>
            <xs:element name="OneTime" type="OneTimeAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="OneTimeAttributes">
        <xs:attributeGroup ref="DateRelevantAttributeGroup" />
        <xs:attributeGroup ref="SellGeneralAttributeGroup" />
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="WeekdaysValidAttributeGroup" />
        <xs:attributeGroup ref="BabyChildAttributeGroup" />
        <xs:attribute name="AlwaysApply" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="SpecialOffersChildren">
        <xs:sequence>
            <xs:element name="SpecialOffer" type="SpecialOfferAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="SpecialOfferAttributes">
        <xs:attribute name="FromDayBase" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>From day number. with a 7/5, this would be 5</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ToDayBase" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>To day number. with a 7/5, this would be 7</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="PayNights" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>How many nights does the customer effectively pay.
                    If this has a value of 5, and I have a FromDay=6, ToDay=7, then if I book 6 days the customer pays 5 nights, if I book 7 days the customer pays 5 nights. SaveNights and PayNights are mutually exclusive. Only one of the attributes is allowed</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="SaveNights" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>How many nights does the customer effectively save,
                    If this has a value of 2, and I have a FromDay=6, ToDay=7, then if I book 6 days the customer pays 4 nights, if I book 7 days the customer pays 5 nights. SaveNights and PayNights are mutually exclusive. Only one of the attributes is allowed</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Type">
            <xs:annotation>
                <xs:documentation>Describes which amounts for the day prices need to be used when determining the special offer amount, e.g.
                    Day1 - 100 CHF
                    Day2 - 110 CHF
                    Day3 - 120 CHF
                    Day4 - 130 CHF
                    Day5 - 140 CHF
                    Day6 - 150 CHF
                    Day7 - 160 CHF
                    If the Type is EndDays, and I have a valid 7/5, then the special offer will be 150 + 160 CHF.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="EndDays" />
                    <xs:enumeration value="StartDays" />
                    <xs:enumeration value="Average" />
                    <xs:enumeration value="MinValue" />
                    <xs:enumeration value="MaxValue" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="DateRelevantAttributeGroup" />
        <xs:attribute name="LastSpOffEndDate" type="xs:date">
            <xs:annotation>
                <xs:documentation>Defines the last possible booking end date for season overlapping special offers.This date can be taken for calculating the valid special offers for a hotel bookin</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RuleType" type="xs:string">
            <xs:annotation>
                <xs:documentation>determines how the special offer is to be used.
                    Always = the special offer is always valid
                    Nr = the attributes DaysBeforeDepartureFrom and DaysBeforeDepartureTo are valid for the calculation
                    Date = the attributes DateBeforeDepartureFrom and DateBeforeDepartureTo are valid for the calculation</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="SpecialCommission" type="xs:float">
            <xs:annotation>
                <xs:documentation>percentage if the price line has a special commission
                    Internal: P_SPEZFLAG must be 1</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ChildChildNr" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>this special offer for a baby or child is valid for the n-th child or baby equal ChildChildNr for ex. first baby/child or second baby/child</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ChildAdultNr" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>this special offer for the baby or child is valid if it is accompanied by number of adults equal ChildAdultNr</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="AddAmountAttributeGroup" />
        <xs:attributeGroup ref="DescIdAttributeGroup" />
        <xs:attributeGroup ref="DaysDateBeforeDepartureAttributeGroup" />
        <xs:attributeGroup ref="BabyChildAttributeGroup" />
        <xs:attribute name="RevolvingGroup" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Some specials are offered as a revolving special, e.g. stay 7 pay 5 revolving 3.
What this means is, that one can stay 21 pay 15, or stay 14 pay 10, or stay 7 pay 5.
The BaseDataExport will export each revolving element as a separate SpecialOffer node entity with a corresponding number of Days (21, 14, 7) so that a user of the interface can determine which special fits best for a given date range, but once a special has been used, it may not be used again.
This is important in the case of a revolving special. In the affore mentioned example, I cannot use the 21/15 and then add a 7/5, as the 7/5 is part of the revolving rule. If the hotel wanted me to be able to book a 28/20, then the revolving would have been entered appropriately with a revolving nr of 4 or more, but in this case the maximum rule allowed is 21/15.
The RevolvingGroup can be used to identify all common specials belonging to the same rule so that after being used once, the rule can be ignored in the further processing for the booking.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Days" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Number of Days for which this special is valid.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="EarlyBookingsChildren">
        <xs:sequence>
            <xs:element name="EarlyBooking" type="EarlyBookingAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="EarlyBookingAttributes">
        <xs:attribute name="FromDay" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>From which day is this early booking rule relevant.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ToDay" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>To which day is this early booking rule relevant.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Percent" type="xs:float">
            <xs:annotation>
                <xs:documentation>Percentage</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="DateRelevantAttributeGroup" />
        <xs:attribute name="ForceDisplay">
            <xs:annotation>
                <xs:documentation>determines whether to show a price with 0 amount
                    0 = do not show
                    1 = has to be shown</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="ForAllDays">
            <xs:annotation>
                <xs:documentation>If ForceDisplay =1 and ForAllDays=1 then the amount has to be shown for all relevant booking days.
                    If ForceDisplay =1 and ForAllDays=0 then the amount has to be shown once.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="SpecialCommission" type="xs:float">
            <xs:annotation>
                <xs:documentation>percentage if the price line has a special commission
                    Internal: P_SPEZFLAG must be 1</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="DateFromToAttributeGroup" />
        <xs:attributeGroup ref="AddAmountAttributeGroup" />
        <xs:attributeGroup ref="DescIdAttributeGroup" />
        <xs:attributeGroup ref="DaysDateBeforeDepartureAttributeGroup" />
        <xs:attribute name="RuleType" type="xs:string">
            <xs:annotation>
                <xs:documentation>determines how the special offer is to be used.
                    Nr = the attributes DaysBeforeDepartureFrom and DaysBeforeDepartureTo are valid for the calculation
                    Date = the attributes DateBeforeDepartureFrom and DateBeforeDepartureTo are valid for the calculation</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="NrNights" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>A special offer can be connected to the number of stay nights. If one stays 7 nights the special offer can be different to a stay of 14 nights. The value in this field identified the maximum number of nights for which this rule is relevant.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="BabyChildAttributeGroup" />
        <xs:attributeGroup ref="ChildIdxNrAttributeGroup" />
        <xs:attributeGroup ref="WeekdaysValidAttributeGroup" />
        <xs:attributeGroup ref="AgeFromToGroup" />
        <xs:attribute name="OneTime">
            <xs:annotation>
                <xs:documentation>If 1, then the EarlyBooking is applied only once, and not per day in the booking period</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:attributeGroup name="DateFromToAttributeGroup">
        <xs:attribute name="DateFrom" type="xs:date" use="required">
            <xs:annotation>
                <xs:documentation>Date from which this price is valid</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="DateTo" type="xs:date" use="required">
            <xs:annotation>
                <xs:documentation>Date to which this price is valid</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="WeekdaysValidAttributeGroup">
        <xs:attribute name="WeekdaysValid" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>A seven character string, e.g. 1000000
                    The above example can be interpreted, that this price is only relevant for a Monday.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="BabyChildAttributeGroup">
        <xs:attribute name="Baby">
            <xs:annotation>
                <xs:documentation>0 = this special offer is valid only for babies
1 = this special offer is only valid for children</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="Child">
            <xs:annotation>
                <xs:documentation>0 = this special offer is valid only for adults
1 = this special offer is only valid for children</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="AgeFromToGroup">
        <xs:attribute name="AgeFrom">
            <xs:annotation>
                <xs:documentation>If this is an age relevant price, then it AgeFrom is the lower inclusive bound for which this price line is valid for. If AgeFrom=2 and AgeTo=12, then this price line is valid for all persons from 2 (incl.) to 11.9999 (not incl. 12).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:minInclusive value="0" />
                    <xs:maxInclusive value="150" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="AgeTo">
            <xs:annotation>
                <xs:documentation>If this is an age relevant price, then it AgeTo is per non-inclusive bound for which this price line is valid for. If AgeFrom=2 and AgeTo=12, then this price line is valid for all persons from 2 (incl.) to 11.9999 (not incl. 12).</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:minInclusive value="0" />
                    <xs:maxInclusive value="150" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="DateRelevantAttributeGroup">
        <xs:attribute name="StartDateRelevant" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If the DateFrom fits into the booking period of the hotel, this special is relevant, i.e. if the start date of the booking is greater than or equal to the DateFrom</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="EndDateRelevant" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If the DateTo fits into the booking period of the hotel, i.e. the last day of the booking is less than or equal to DateTo, this special is relevant</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="DayAttributeGroup">
        <xs:attribute name="Day" type="xs:date" use="required">
            <xs:annotation>
                <xs:documentation>Specific date for which this price is valid</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="SpecialCommissionAttributeGroup">
        <xs:attribute name="SpecialCommission" type="xs:float">
            <xs:annotation>
                <xs:documentation>Percentage if the price line has a special commission. Note this can be supplied in combination with SpecialCommissionFlag. Normally a supplier sets the commission for a price line to a fixed value, then SpecialCommission and SpecialCommissionFlag both need to be supplied. The meal, for example, can have a fixed commission which differs to the normal commission given to the travel agent. 
</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="SpecialCommissionFlag">
            <xs:annotation>
                <xs:documentation>Internal: P_SPEZFLAG</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="AddAmountAttributeGroup">
        <xs:attribute name="AddAmount" type="xs:float">
            <xs:annotation>
                <xs:documentation>This amount needs to be added to the calculated SpecialOffer amount. Normally this will be a negative amount, e.g. when the special offer is calculated, but the cost for Breakfast is not included in special offer</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="SellGeneralAttributeGroup">
        <xs:attributeGroup ref="DescIdAttributeGroup" />
        <xs:attribute name="Price" type="xs:float" use="required">
            <xs:annotation>
                <xs:documentation>This can be a price per person (default) or a price per day. If this is a price per day, then a Type = R is supplied as an attribute</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Type">
            <xs:annotation>
                <xs:documentation>P = Price per person (default)
                    R = Price per Room</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="P" />
                    <xs:enumeration value="R" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="NotSpecialRelevant">
            <xs:annotation>
                <xs:documentation>Some price lines must be ignored when calculating a special.
                    1 = NotSpecialRelevant</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger">
                    <xs:enumeration value="0" />
                    <xs:enumeration value="1" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attributeGroup ref="SpecialCommissionAttributeGroup" />
    </xs:attributeGroup>
    <xs:attributeGroup name="ChildIdxNrAttributeGroup">
        <xs:attribute name="ChildIdxNr">
            <xs:annotation>
                <xs:documentation>If an ChildIndexNr is supplied, the price cannot be a Percentage price, but is an effective price for the additional child in the room. If this is a double room that optionally allows either two additional adults or two additional children (maximum two extra persons in room), then the following additional price lines would have to be supplied:
                    ChildIndexNr=1 (first additional child in the room)
                    ChildIndexNr=2 (second additional child in the room)
                    ChildIndexNr=0 (no additional children in room)
                    If the node ChildIndexNr is not supplied, or 0, then the price is valid for all children in the AgeFrom/AgeTo range
                    Internal: TYPE2
                    Do PriceList.$search($ref.P_KINDERPREISSPEZ=0&amp;$ref.P_PROZERMAESSIG=0,1,1,1,1)
                    Internal: Type3
                    Do PriceList.$search($ref.P_KINDERPREISSPEZ&gt;0&amp;$ref.P_PROZERMAESSIG=0,1,1,1,</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:nonNegativeInteger" />
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:attributeGroup name="DaysDateBeforeDepartureAttributeGroup">
        <xs:attribute name="DaysBeforeDepartureFrom" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Number of days before the booking date: from
Either a special offer/early booking has a DaysBeforeDepartureFrom and DaysBeforeDepartureTo, or it has DateBeforeDepartureFrom and DateBeforeDepartureTo. They are mutually exclusive.

NOTE: this number is mapped to a DateBeforeDepartureFrom date, i.e. current date minus "from" number of days, so the value of DaysBeforeDepartureFrom must be larger than the value of DaysBeforeDepartureTo.

current date - "DaysBeforeDepartureFrom" days &lt; current date - "DaysBeforeDepartureTo", so DaysBeforeDepartureFrom &gt; DaysBeforeDeparture</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="DaysBeforeDepartureTo" type="xs:nonNegativeInteger">
            <xs:annotation>
                <xs:documentation>Number of days before the booking date: to
Either a special offer/early booking has a DaysBeforeDepartureFrom and DaysBeforeDepartureTo, or it has DateBeforeDepartureFrom and DateBeforeDepartureTo. They are mutually exclusive.

NOTE: this number is mapped to a DateBeforeDepartureTo date, i.e. current date minus "to" number of days, so the value of DaysBeforeDepartureFrom must be larger than the value of DaysBeforeDepartureTo.

current date - "DaysBeforeDepartureFrom" days &lt; current date - "DaysBeforeDepartureTo", so DaysBeforeDepartureFrom &gt; DaysBeforeDeparture</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="DateBeforeDepartureFrom" type="xs:date">
            <xs:annotation>
                <xs:documentation>Date from when the booking can be made, for this rule to be relevant Either a special offer/early booking has a DaysBeforeDepartureFrom and DaysBeforeDepartureTo, or it has DateBeforeDepartureFrom and DateBeforeDepartureTo. They are mutually exclusive.

DateBeforeDepartureFrom must be smaller than DateBeforeDepartureTo</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="DateBeforeDepartureTo" type="xs:date">
            <xs:annotation>
                <xs:documentation>Either a special offer/early booking has a DaysBeforeDepartureFrom and DaysBeforeDepartureTo, or it has DateBeforeDepartureFrom and DateBeforeDepartureTo. They are mutually exclusive.

DateBeforeDepartureFrom must be smaller than DateBeforeDepartureTo</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:complexType name="ItemInfos">
        <xs:sequence>
            <xs:element name="ItemInfo" type="ItemInfoChildren" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="ItemInfoChildren">
        <xs:all>
            <xs:element name="BeginDate" type="xs:date" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Start date when an information applies. Inclusive.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="EndDate" type="xs:date" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>End date when an information applies. Inclusive.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Type" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Item
													Destination
													Country
												</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Item" />
                        <xs:enumeration value="Destination" />
                        <xs:enumeration value="Country" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Invoice" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:enumeration value="0" />
                        <xs:enumeration value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Itinerary" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:enumeration value="0" />
                        <xs:enumeration value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="External" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                        <xs:enumeration value="0" />
                        <xs:enumeration value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Title" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Title of info. Node is only sent if a value exists.</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:all>
                        <xs:element name="de" type="xs:string" minOccurs="0" />
                        <xs:element name="en" type="xs:string" minOccurs="0" />
                        <xs:element name="fr" type="xs:string" minOccurs="0" />
                        <xs:element name="it" type="xs:string" minOccurs="0" />
                    </xs:all>
                </xs:complexType>
            </xs:element>
            <xs:element name="Text" type="Translation" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Description text of item info</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>
    </xs:complexType>
    <xs:complexType name="AllotmentChildren">
        <xs:sequence>
            <xs:element name="Allotment" type="AllotmentAttributes" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="AllotmentAttributes">
        <xs:attribute name="Date" type="xs:date">
            <xs:annotation>
                <xs:documentation>
                        Date for this allotment item
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Av" type="xs:float">
            <xs:annotation>
                <xs:documentation>
                        The rest availability of this item
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="Rel" type="xs:date">
            <xs:annotation>
                <xs:documentation>
                        Release date.
                        If the current date is GREATER
                        than the release date, then
                        this item cannot be booked on
                        allotment.
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="MinStay" type="xs:date">
            <xs:annotation>
                <xs:documentation>
                        Minimum stay for this item.
                        If the END DATE
                        of the booking is LESS THAN OR EQUAL TO the
                        MinStayDate, then
                        this item cannot be booked on allotment.
                        e.g.
                        Product Booking
                        Dates: From=1. JAN, To=2.Jan
                        If the MinStayDate=2. JAN, this
                        item cannot be booked on
                        allotment. If the MinStayDate=1. JAN
                        then this item CAN be
                        booked on allotment.
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="RQ" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                        Indicates if this item can be booked on
                        Request.
                        One always needs to frst check if a product has
                        allotment, then
                        if it is available on Free-Sell, then look to
                        see if it is
                        available on Request.
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="FS" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                        Indicates if this item can be booked on
                        Free-Sell.
                        One always needs to frst check if a product has
                        allotment, then
                        if it is available on Free-Sell, then look to
                        see if it is
                        available on Request.
                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="MaxStay" type="xs:date">
            <xs:annotation>
                <xs:documentation>If filled, then the item cannot be booked over the given date. If empty, a maximum stay is not specified explicitly.

If filled, the date is allotment relevant. A hotel is an overnight element where the return date is one day more than the date used for allotment checking.

                    </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="ArrOK" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If 1, then an arrival at this product on the day is allowed. If 0, then an arrival has explicitly been disallowed.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="DepOK" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If 1, then an departure at this product on the day is allowed. If 0, then an departure has explicitly been disallowed.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="NoArr" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If 1, then an arrival for this product on the day is explicitly NOT allowed. The value has a higher priority than ArrOK. It is used when an item needs to be explicitly blocked for a short period. The short period has a higher weight than the general rule.
Default: 0 .</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="NoDep" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>If 1, then an departure for this product on the day is explicitly NOT allowed. The value has a higher priority than DepOK. It is used when an item needs to be explicitly blocked for a short period. The short period has a higher weight than the general rule.
Default: 0 .</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
</xs:schema>
